rot.per=.15, colors=pal,vfont=c("serif","plain")
)
# to the cloud!
wordcloud(freqTerms$term,freqTerms$Freq,scale=c(8,.2),min.freq=1,
max.words=Inf, random.order=FALSE,
rot.per=.15, colors=pal,vfont=c("script","plain")
)
wordcloud(freqTerms$term,freqTerms$Freq,scale=c(8,.2),min.freq=1,
max.words=Inf, random.order=FALSE,
rot.per=.15, colors=pal,vfont=c("helvetica","sans")
)
wordcloud(freqTerms$term,freqTerms$Freq,scale=c(8,.2),min.freq=1,
max.words=Inf, random.order=FALSE,
rot.per=.15, colors=pal,vfont=c("Helvetica","sans")
)
wordcloud(freqTerms$term,freqTerms$Freq,scale=c(8,.2),min.freq=1,
max.words=Inf, random.order=FALSE,
rot.per=.15, colors=pal,vfont=c("serif","plain")
)
warnings()
runApp("wordcloud", display.mode = "showcase")
getwd()
library(data.table)
library(shiny)
library(wordcloud)
require(RColorBrewer)
pal <- brewer.pal(8,"Accent")
stopWords <- c('a','about','above','across','after','afterwards','again','against','all','almost','alone','along',
'already','also','although','always','am','among','amongst','amoungst','amount','an','and','another',
'any','anyhow','anyone','anything','anyway','anywhere','are','around','as','at','back','be','became',
'because','become','becomes','becoming','been','before','beforehand','behind','being','below','beside',
'besides','between','beyond','bill','both','bottom','but','by','call','can','cannot','cant','co','computer',
'con','could','couldnt','cry','de','describe','detail','do','done','down','due','during','each','eg','eight',
'either','eleven','else','elsewhere','empty','enough','etc','even','ever','every','everyone','everything',
'everywhere','except','few','fifteen','fify','fill','find','fire','first','five','for','former','formerly',
'forty','found','four','from','front','full','further','get','give','go','had','has','hasnt','have','he',
'hence','her','here','hereafter','hereby','herein','hereupon','hers','him','his','how','however','hundred',
'i','ie','if','in','inc','indeed','interest','into','is','it','its','itse','keep','last','latter','latterly',
'least','less','ltd','made','many','may','me','meanwhile','might','mill','mine','more','moreover','most',
'mostly','move','much','must','my','myse','name','namely','neither','never','nevertheless','next','nine','no',
'nobody','none','noone','nor','not','nothing','now','nowhere','of','off','often','on','once','one','only','onto',
'or','other','others','otherwise','our','ours','ourselves','out','over','own','part','per','perhaps','please',
'put','rather','re','s','same','see','seem','seemed','seeming','seems','serious','several','she','should','show',
'side','since','sincere','six','sixty','so','some','somehow','someone','something','sometime','sometimes',
'somewhere','still','such','system','take','ten','than','that','the','their','them','themselves','then','thence',
'there','thereafter','thereby','therefore','therein','thereupon','these','they','thick','thin','third','this',
'those','though','three','through','throughout','thru','thus','to','together','too','top','toward','towards',
'twelve','twenty','two','un','under','until','up','upon','us','very','via','was','we','well','were','what',
'whatever','when','whence','whenever','where','whereafter','whereas','whereby','wherein','whereupon','wherever',
'whether','which','while','whither','who','whoever','whole','whom','whose','why','will','with','within','without',
'would','yet','you','your','yours','yourself','yourselves','nursery','5')
# stop words data table
stopTerms <- data.table(term=cbind(stopWords))
# stop words added data table for easier checking
stopTerms <- data.table(cbind(stopWords))
setnames(stopTerms,c("stopWords"),c("term"))
# scrub job words before running against stopTerms
clean <- gsub("[^a-zA-Z]", " ", job)
clean <- gsub(" +", " ", clean)
clean <- strsplit(clean," ")
jobTerms <- data.table(term=cbind(tolower(unlist(clean))))
setnames(jobTerms,c("term.V1"),c("term"))
# remove
jobTerms <- jobTerms[!(jobTerms$term %in% stopTerms$term),]
# results <- words[words$term==t]
# calculate frequency of term table
freqTerms <- data.frame(xtabs(formula = ~., data = jobTerms))
shinyServer(
function(input, output) {
output$inputValue <- renderPrint({input$job})
output$jobcloud <- renderPlot({
wordcloud(freqTerms$term,freqTerms$Freq,scale=c(8,.2),min.freq=1,
max.words=Inf, random.order=FALSE,
rot.per=.15, colors=pal,vfont=c("serif","plain")
)
})
#     output$prediction <- renderPrint({diabetesRisk(input$glucose)})
}
)
library(shiny)
defaultJob <- "Technical Project Manager
Summary
This position involves the management of client related projects that fall outside the scope of the core services. These projects may me self-performed, carried out by internal staff, outsourced to external vendors or any combination of these. The PM will oversee the projects from inception to final completion and closely manage them throughout their progression. Where implementation projects are converted into on-going maintenance scope, the PM will be an integral part of the transition team. Though projects may be in either our Workplace or SharePoint practice groups.
Details
The essential duties and responsibilities include the following. Other duties and responsibilities may be assigned as this role evolves. • The Project Manager will need to become intimately familiar with Buildingi’s core business and operations. • The willingness and ability to work onsite at the Customer’s offices and represent BIS and their services provided with the utmost professionalism. • Advanced use of a variety of productivity and drawing packages to author, edit, aggregate and present a wide array of data. • Define scope and provide detailed preliminary and final cost estimates • Manage all documentation associated with the creation and management of projects and sub-projects. • Track project costs and provide detailed status reports on a recurring basis. • Provide reporting of key business metrics for productivity tracking and client business reviews. • Develop and maintain a functional SOP for the Project Manager role. • `Support other department personnel as requested by the Customer or Parent Organization.
Requirements
Bachelor’s Degree (B.A.) from four year college or university, or equivalent combination of technical training and/or related experience. At least three (3) years experience in similar industry and related functions. Specific experience in Workplace or SharePoint Solutions Delivery is preferred. eoe"
# 3rd example
shinyUI(pageWithSidebar(
headerPanel("Job Description Word Cloud"),
sidebarPanel(
textInput("job", "Enter job description:", defaultJob),
submitButton('Submit')
),
mainPanel(
h3('Results of prediction'),
h4('Which resulted in a wordcloud of '),
plotOutput('jobcloud'),
h4('You entered this job description'),
verbatimTextOutput("inputValue")
)
)
)
runApp("wordcloud", display.mode = "showcase")
getwd()
setwd("~/scripts/r")
runApp("wordcloud", display.mode = "showcase")
setwd("~/scripts/r/wordcloud")
runApp("wordcloud", display.mode = "showcase")
library(shiny)
runApp("wordcloud", display.mode = "showcase")
setwd("~/scripts/r")
runApp("wordcloud", display.mode = "showcase")
setwd("~/scripts/r")
runApp("wordcloud")
runApp("wordcloud", display.mode = "showcase")
runApp("wordcloud")
runApp("wordcloud")
calcTermFreq <- function(job){
# scrub job words before running against stopTerms
clean <- gsub("[^a-zA-Z]", " ", job)
clean <- gsub(" +", " ", clean)
clean <- strsplit(clean," ")
jobTerms <- data.table(term=cbind(tolower(unlist(clean))))
setnames(jobTerms,c("term.V1"),c("term"))
# keep only terms that are not in stop words
jobTerms <- jobTerms[!(jobTerms$term %in% stopTerms$term),]
# calculate frequency of term table
freqTerms <- data.frame(xtabs(formula = ~., data = jobTerms))
return(freqTerms)
}
job <- "Technical Project Manager
Summary
This position involves the management of client related projects that fall outside the scope of the core services. These projects may me self-performed, carried out by internal staff, outsourced to external vendors or any combination of these. The PM will oversee the projects from inception to final completion and closely manage them throughout their progression. Where implementation projects are converted into on-going maintenance scope, the PM will be an integral part of the transition team. Though projects may be in either our Workplace or SharePoint practice groups.
Details
The essential duties and responsibilities include the following. Other duties and responsibilities may be assigned as this role evolves. • The Project Manager will need to become intimately familiar with Buildingi’s core business and operations. • The willingness and ability to work onsite at the Customer’s offices and represent BIS and their services provided with the utmost professionalism. • Advanced use of a variety of productivity and drawing packages to author, edit, aggregate and present a wide array of data. • Define scope and provide detailed preliminary and final cost estimates • Manage all documentation associated with the creation and management of projects and sub-projects. • Track project costs and provide detailed status reports on a recurring basis. • Provide reporting of key business metrics for productivity tracking and client business reviews. • Develop and maintain a functional SOP for the Project Manager role. • `Support other department personnel as requested by the Customer or Parent Organization.
Requirements
Bachelor’s Degree (B.A.) from four year college or university, or equivalent combination of technical training and/or related experience. At least three (3) years experience in similar industry and related functions. Specific experience in Workplace or SharePoint Solutions Delivery is preferred. eoe"
freq <- calcTermFreq(job)
View(freqTerms)
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud", display.mode = "showcase")
jobCloud <- function(job){
# scrub job words before running against stopTerms
clean <- gsub("[^a-zA-Z]", " ", job)
clean <- gsub(" +", " ", clean)
clean <- strsplit(clean," ")
jobTerms <- data.table(term=cbind(tolower(unlist(clean))))
setnames(jobTerms,c("term.V1"),c("term"))
# keep only terms that are not in stop words
jobTerms <- jobTerms[!(jobTerms$term %in% stopTerms$term),]
# calculate frequency of term table
freqTerms <- data.frame(xtabs(formula = ~., data = jobTerms))
wordcloud(freqTerms$term,freqTerms$Freq,scale=c(8,.2),min.freq=1,
max.words=Inf, random.order=FALSE,
rot.per=.15, colors=pal,vfont=c("serif","plain")
)
}
jobCloud(job)
runApp("wordcloud", display.mode = "showcase")
runApp("wordcloud", display.mode = "showcase")
runApp("wordcloud", display.mode = "showcase")
runApp("wordcloud", display.mode = "showcase")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
freqTerms
w <- unlist(keywords)
keywords <- "Data Science"
w <- unlist(keywords)
dt <- data.table(unlist(keywords))
View(dt)
dt <- data.table(unlist(strsplit(keywords," ")))
View(dt)
dt <- data.table(term=unlist(strsplit(keywords," ")))
View(dt)
dt[(dt$term %in% jobTerms$term),]
jobTerms$term
keywords <- "project management status unicorn"
dt <- data.table(term=unlist(tolower(strsplit(keywords," "))))
dt[(dt$term %in% jobTerms$term),]
View(dt)
dt <- data.table(term=unlist(strsplit(keywords," ")))
dt <- data.table(term=tolower(unlist(strsplit(keywords," "))))
View(dt)
dt[(dt$term %in% jobTerms$term),]
dt$match <- dt[(dt$term %in% jobTerms$term),]
dt[dt$term %in% jobTerms$term,match:=1]
View(dt)
dt <- data.table(term=tolower(unlist(strsplit(keywords," "))))
# dt[dt$country == "Soviet Union",modernname:="Russia"]
dt$match <- 0
dt[dt$term %in% jobTerms$term,match:=1]
View(dt)
dt
freqTermsMatch <- merge(freqTerms, dt)
View(freqTermsMatch)
dt <- data.table(term=tolower(unlist(strsplit(keywords," "))))
dt$match <- 0
dt[dt$term %in% jobTerms$term,match:=1]
dt[(dt$term %in% jobTerms$term),]
freqTermsMatch <- merge(freqTerms, dt, all=TRUE)
View(freqTerms)
View(freqTermsMatch)
freqTermsMatch <- merge(freqTerms, dt, all.x=TRUE)
View(freqTermsMatch)
freqTermsMatch <- merge(dt,freqTerms, all.x=TRUE)
freqTermsMatch <- merge(dt,freqTerms,by="term" all.x=TRUE)
freqTermsMatch <- merge(dt,freqTerms,by="term", all.x=TRUE)
View(freqTermsMatch)
dt <- data.table(term=tolower(unlist(strsplit(keywords," "))))
dt$match <- 0
dt[dt$term %in% jobTerms$term,match:=1]
dt[(dt$term %in% jobTerms$term),]
View(dt)
freqTermsMatch <- merge(dt,freqTerms,by="term", all.x=TRUE)
View(freqTermsMatch)
freqTermsMatch <- merge(dt,freqTerms,by="term")
View(freqTermsMatch)
!dt[(dt$term %in% jobTerms$term),]
dt[!(dt$term %in% jobTerms$term),]
nomatch <- dt[!(dt$term %in% jobTerms$term),]
rbind(freqTermsMatch,nomatch)
View(nomatch)
View(freqTermsMatch)
nomatch <- cbind(dt[!(dt$term %in% jobTerms$term),],Freq=0)
View(nomatch)
View(freqTermsMatch)
freqTermsMatch <- rbind(freqTermsMatch,nomatch)
View(freqTermsMatch)
freqTermsMatch <- freqTermsMatch[order(freqTermsMatch$Freq,decreasing=TRUE),]
View(freqTermsMatch)
g <- ggplot(freqTermsMatch,aes(x=term,y=Freq))
g + geom_bar(stat='identity') +
labs(title = 'Keyword match to Job Description') +
labs(x = 'Keyword', y = 'Frequency') +
theme_bw(base_size = 10) +
theme(axis.text.x = element_text(angle=90))
library(ggplot2)
g <- ggplot(freqTermsMatch,aes(x=term,y=Freq))
g + geom_bar(stat='identity') +
labs(title = 'Keyword match to Job Description') +
labs(x = 'Keyword', y = 'Frequency') +
theme_bw(base_size = 10) +
theme(axis.text.x = element_text(angle=90))
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud", display.mode = "showcase")
runApp("wordcloud")
clean <- gsub("[^a-zA-Z]", " ", job)
clean <- gsub(" +", " ", clean)
clean <- strsplit(clean," ")
jobTerms <- data.table(term=cbind(tolower(unlist(clean))))
setnames(jobTerms,c("term.V1"),c("term"))
# keep only terms that are not in stop words
jobTerms <- jobTerms[!(jobTerms$term %in% stopTerms$term),]
# calculate frequency of term table
freqTerms <- data.frame(xtabs(formula = ~., data = jobTerms))
dt <- data.table(term=tolower(unlist(strsplit(keywords," "))))
# set default match to zero
dt$match <- 0
# if term is in Job Description, set to 1
dt[dt$term %in% jobTerms$term,match:=1]
# unmatched keyword
nomatch <- cbind(dt[!(dt$term %in% jobTerms$term),],Freq=0)
# matches
freqTermsMatch <- merge(dt,freqTerms,by="term")
# combine for data view
freqTermsMatch <- rbind(freqTermsMatch,nomatch)
freqTermsMatch <- freqTermsMatch[order(freqTermsMatch$Freq,decreasing=TRUE),]
library(ggplot2)
# ggplot2
g <- ggplot(freqTermsMatch,aes(x=term,y=Freq))
g + geom_bar(stat='identity') +
labs(title = 'Keyword match to Job Description') +
labs(x = 'Keyword', y = 'Frequency') +
theme_bw(base_size = 10) +
theme(axis.text.x = element_text(angle=90))
runApp("wordcloud")
x <- c("red","blue","green")
y <- c(1,2,3)
plot(x,y)
x <- c("red","blue","green")
y <- c(1,2,3)
dt <- cbind(x,y)
plot(dt)
dt <- data.table(color=x,Freq=y)
plot(dt)
dt <- data.table(color=x,Freq=y)
View(dt)
plot(dt)
hist(dt$y)
hist(dt)
hist(dt$color, xlab='color', col='lightblue',main='Histogram')
hist(dt$Freq, xlab='color', col='lightblue',main='Histogram')
runApp("wordcloud")
runApp("wordcloud")
x <- c("red","blue","green")
y <- c(1,2,3)
dt <- data.table(color=x,Freq=y)
ggplot(dt,aes(x=color,y=Freq))
x <- c("red","blue","green")
y <- c(1,2,3)
dt <- data.table(color=x,Freq=y)
g <- ggplot(dt,aes(x=color,y=Freq))
g + geom_bar(stat='identity') +
labs(title = 'Keyword match to Job Description') +
labs(x = 'Keyword', y = 'Frequency') +
theme_bw(base_size = 10) +
theme(axis.text.x = element_text(angle=90))
runApp("wordcloud")
x <- c("red","blue","green")
y <- c(1,2,3)
dt <- data.table(color=x,Freq=y)
plot(dt$color, dt$Freq,
xlab = "5 Minute Interval", ylab = "Average # of Steps",
main = "Average Daily Activity",
pch=20,
col="green",
type="l"
)
x <- c("red","blue","green")
y <- c(1,2,3)
dt <- data.table(color=x,Freq=y)
plot(dt$color, dt$Freq,
xlab = "5 Minute Interval", ylab = "Average # of Steps",
main = "Average Daily Activity",
pch=20,
col="green"
)
dt$color
View(dt)
plot(x = dt$color, y = dt$Frea, type = "n",
xlab="", ylab="Global Active Power (kilowatts)")
dt
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
runApp("wordcloud")
job <- "Data Scientist, Analytics - Seattle
Facebook was built to help people connect and share, and over the last decade our tools have played a critical part in changing how people around the world communicate with one another. With over a billion people using the service and more than fifty offices around the globe, a career at Facebook offers countless ways to make an impact in a fast growing organization.
We’re looking for data scientists to work on our core products with a passion for social media to help drive informed business decisions for Facebook. You will enjoy working with one of the richest data sets in the world, cutting edge technology, and the ability to see your insights turned into real products on a regular basis. The perfect candidate will have a background in computer science or a related technical field, will have experience working with large data stores, and will have some experience building software. You are scrappy, focused on results, a self-starter, and have demonstrated success in using analytics to drive the understanding, progression, and user engagement of a product. This position is located in our Seattle office.
Responsibilities
Apply your expertise in quantitative analysis, data mining, and the presentation of data to see beyond the numbers and understand how our users interact with our core products
Partner with Product and Engineering teams to solve problems and identify trends and opportunities
Inform, influence, support, and execute our product decisions
Build/maintain reports, dashboards, and metrics to monitor the performance of our products
Mine massive amounts of data and extract useful product insights
Manage development of data resources, gather requirements, organize sources, and support product launches
Requirements
3+ years experience doing quantitative analysis preferably for a social web company
BA/BS in Computer Science, Math, Physics, or other technical field. Advanced degrees preferred but not required
Fluency in SQL or other programming languages. Some development experience in at least one scripting language (PHP, Python, Perl, etc.)
Experience with large data sets and distributed computing (Hive/Hadoop) a plus
Ability to initiate and drive projects to completion with minimal guidance
The ability to communicate the results of analyses in a clear and effective manner
Basic understanding of statistical analysis, experience with packages such as R, MATLAB, SPSS, SAS, Stata, etc. preferred"
keywords <- "Data Science"
clean <- gsub("[^a-zA-Z]", " ", job)
clean <- gsub(" +", " ", clean)
clean <- strsplit(clean," ")
jobTerms <- data.table(term=cbind(tolower(unlist(clean))))
setnames(jobTerms,c("term.V1"),c("term"))
# keep only terms that are not in stop words
jobTerms <- jobTerms[!(jobTerms$term %in% stopTerms$term),]
# calculate frequency of term table
freqTerms <- data.frame(xtabs(formula = ~., data = jobTerms))
dt <- data.table(term=tolower(unlist(strsplit(keywords," "))))
# set default match to zero
dt$match <- 0
# if term is in Job Description, set to 1
dt[dt$term %in% jobTerms$term,match:=1]
# unmatched keyword
nomatch <- cbind(dt[!(dt$term %in% jobTerms$term),],Freq=0)
# matches
freqTermsMatch <- merge(dt,freqTerms,by="term")
# combine & sort for data view
freqTermsMatch <- rbind(freqTermsMatch,nomatch)
freqTermsMatch <- freqTermsMatch[order(freqTermsMatch$Freq,decreasing=TRUE),]
dt[!(dt$term %in% jobTerms$term),]
clean <- gsub("[^a-zA-Z]", " ", job)
clean <- gsub(" +", " ", clean)
clean <- strsplit(clean," ")
jobTerms <- data.table(term=cbind(tolower(unlist(clean))))
setnames(jobTerms,c("term.V1"),c("term"))
# keep only terms that are not in stop words
jobTerms <- jobTerms[!(jobTerms$term %in% stopTerms$term),]
# calculate frequency of term table
freqTerms <- data.frame(xtabs(formula = ~., data = jobTerms))
dt <- data.table(term=tolower(unlist(strsplit(keywords," "))))
# set default match to zero
dt$match <- 0
# if term is in Job Description, set to 1
dt[dt$term %in% jobTerms$term,match:=1]
# unmatched keyword
unmatchedWords <- dt[!(dt$term %in% jobTerms$term),]
if(nrow(unmatchedWords)>0) nomatch <- cbind(unmatchedWords,Freq=0)
# matches
freqTermsMatch <- merge(dt,freqTerms,by="term")
# combine & sort for data view
freqTermsMatch <- rbind(freqTermsMatch,nomatch)
freqTermsMatch <- freqTermsMatch[order(freqTermsMatch$Freq,decreasing=TRUE),]
g <- ggplot(freqTermsMatch,aes(x=term,y=Freq))
print(g + geom_bar(stat='identity') +
labs(title = 'Keyword match to Job Description') +
labs(x = 'Keyword', y = 'Frequency') +
theme(axis.text.x = element_text(angle=90)))
runApp("wordcloud")
setwd("~/scripts/r")
runApp("wordcloud")
library(shiny)
setwd("~/scripts/r")
runApp("wordcloud")
setwd("~/scripts/r")
runApp("wordcloud")
setwd("~/scripts/r")
runApp("wordcloud")
setwd("~/scripts/r")
runApp("wordcloud")
runApp("wordcloud")
library(shinyapps)
deployApp()
shinyapps::setAccountInfo(
name="alicia",
token="4BF895216376C447E249DB792777E25F",
secret="JkpEM8lnagZk0AHi1YdJiG2IlZNmEjHORN1onnxn")
setwd("~/scripts/r/wordcloud")
deployApp()
deployApp()
deployApp()
devtools::install_github('rstudio/rscrypt')
deployApp()
deployApp()
library(shinyApps)
library(shinyApp)
library(shinyapps)
deployApp()
library("devtools")
library("shinyapps")
shinyapps::setAccountInfo(name='alicia', token='4BF895216376C447E249DB792777E25F', secret='JkpEM8lnagZk0AHi1YdJiG2IlZNmEjHORN1onnxn')
devtools::install_github
deployApp()
library(shiny)
library(data.table)
library(wordcloud)
library(ggplot2)
require(RColorBrewer)
pal <- brewer.pal(8,"Accent")
stopWords <- c('a','about','above','across','after','afterwards','again','against','all','almost','alone','along',
'already','also','although','always','am','among','amongst','amoungst','amount','an','and','another',
'any','anyhow','anyone','anything','anyway','anywhere','are','around','as','at','back','be','became',
'because','become','becomes','becoming','been','before','beforehand','behind','being','below','beside',
'besides','between','beyond','bill','both','bottom','but','by','call','can','cannot','cant','co','computer',
'con','could','couldnt','cry','de','describe','detail','do','done','down','due','during','each','eg','eight',
'either','eleven','else','elsewhere','empty','enough','etc','even','ever','every','everyone','everything',
'everywhere','except','few','fifteen','fify','fill','find','fire','first','five','for','former','formerly',
'forty','found','four','from','front','full','further','get','give','go','had','has','hasnt','have','he',
'hence','her','here','hereafter','hereby','herein','hereupon','hers','him','his','how','however','hundred',
'i','ie','if','in','inc','indeed','interest','into','is','it','its','itse','keep','last','latter','latterly',
'least','less','ltd','made','many','may','me','meanwhile','might','mill','mine','more','moreover','most',
'mostly','move','much','must','my','myse','name','namely','neither','never','nevertheless','next','nine','no',
'nobody','none','noone','nor','not','nothing','now','nowhere','of','off','often','on','once','one','only','onto',
'or','other','others','otherwise','our','ours','ourselves','out','over','own','part','per','perhaps','please',
'put','rather','re','s','same','see','seem','seemed','seeming','seems','serious','several','she','should','show',
'side','since','sincere','six','sixty','so','some','somehow','someone','something','sometime','sometimes',
'somewhere','still','such','system','take','ten','than','that','the','their','them','themselves','then','thence',
'there','thereafter','thereby','therefore','therein','thereupon','these','they','thick','thin','third','this',
'those','though','three','through','throughout','thru','thus','to','together','too','top','toward','towards',
'twelve','twenty','two','un','under','until','up','upon','us','very','via','was','we','well','were','what',
'whatever','when','whence','whenever','where','whereafter','whereas','whereby','wherein','whereupon','wherever',
'whether','which','while','whither','who','whoever','whole','whom','whose','why','will','with','within','without',
'would','yet','you','your','yours','yourself','yourselves')
# stop words data table
stopTerms <- data.table(term=cbind(stopWords))
# stop words added data table for easier checking
stopTerms <- data.table(cbind(stopWords))
setnames(stopTerms,c("stopWords"),c("term"))
clean <- gsub("[^a-zA-Z]", " ", job)
clean <- gsub(" +", " ", clean)
clean <- strsplit(clean," ")
jobTerms <- data.table(term=cbind(tolower(unlist(clean))))
setnames(jobTerms,c("term.V1"),c("term"))
# keep only terms that are not in stop words
jobTerms <- jobTerms[!(jobTerms$term %in% stopTerms$term),]
# calculate frequency of term table
freqTerms <- data.frame(xtabs(formula = ~., data = jobTerms))
dt <- data.table(term=tolower(unlist(strsplit(keywords," "))))
# set default match to zero
dt$match <- 0
# if term is in Job Description, set to 1
dt[dt$term %in% jobTerms$term,match:=1]
# matches
freqTermsMatch <- merge(dt,freqTerms,by="term")
# unmatched keyword
unmatchedWords <- dt[!(dt$term %in% jobTerms$term),]
if(nrow(unmatchedWords)>0){
nomatch <- cbind(unmatchedWords,Freq=0)
freqTermsMatch <- rbind(freqTermsMatch,nomatch)
}
freqTermsMatch <- freqTermsMatch[order(freqTermsMatch$Freq,decreasing=TRUE),]
